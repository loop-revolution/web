type AuthPayload {
  token: String
  person: Person
}

type Block {
  id: Int!
  data: String!
  owner: Person!
}

input BlockWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  updateCount(by: Int!): Int
  createBlock(data: String): Block
  updateBlockData(newData: String!, blockId: Int!): Block
  login(name: String!, password: String!): AuthPayload
  signup(name: String!, password: String!): AuthPayload
}

type Person {
  id: Int!
  name: String!
  owned(first: Int, last: Int, before: BlockWhereUniqueInput, after: BlockWhereUniqueInput): [Block!]!
}

input PersonWhereUniqueInput {
  id: Int
  name: String
  refName: String
}

type Query {
  count: Int
  blockCount: Int
  blocks(first: Int, last: Int, before: BlockWhereUniqueInput, after: BlockWhereUniqueInput): [Block!]!
  people(first: Int, last: Int, before: PersonWhereUniqueInput, after: PersonWhereUniqueInput): [Person!]!
}

